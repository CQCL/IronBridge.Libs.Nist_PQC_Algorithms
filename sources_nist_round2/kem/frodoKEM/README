Learning with Errors Key Encapsulation (FrodoKEM)
=================================================

This document describes basic instructions to compile and test the software implementations
accompanying the Learning with Errors Key Encapsulation (FrodoKEM) submission.

The software was developed by Microsoft Research and is available under the MIT License.


1. CONTENT:
   -------

The FrodoKEM submission includes implementations for three security levels. The corresponding
schemes are called:

(i) FrodoKEM-640-AES, FrodoKEM-976-AES and FrodoKEM-1344-AES, when using AES for the generation 
of the matrix "A",
(ii) FrodoKEM-640-SHAKE, FrodoKEM-976-SHAKE and FrodoKEM-1344-SHAKE, when using SHAKE128 for 
the generation of the matrix "A".

This submission package contains the following folders:

- KAT/: KAT values generated with the code ("PQCgenKAT_kem.c") provided by NIST.
- Reference_Implementation/<FrodoKEM-#>/: portable, easy-to-read implementations exclusively
  written in ANSI C.
- Optimized_Implementation/<FrodoKEM-#>/: portable implementations optimized for speed and
  exclusively written in ANSI C.
- Additional_Implementations/x64/<FrodoKEM-#>/: optimized, supplementary implementations
  exploiting AVX2 intrinsics and AES-NI for x64 platforms.
- Additional_Implementations/Parameter_Search_Scripts/: scripts for selecting parameters; see
  the README file in that directory for details.
- Supporting_Documentation/: contains the cover sheet and specification of FrodoKEM.

We refer to <FrodoKEM-#> as any of {FrodoKEM-640, FrodoKEM-976, FrodoKEM-1344}.
We refer to <implementation> as any of {Reference_Implementation/reference,
Optimized_Implementation/optimized, Additional_Implementations/x64}.


COMPLEMENTARY CRYPTO FUNCTIONS:
------------------------------

Random values are generated with /dev/urandom. Check folder <implementation>/<FrodoKEM-#>/random
for details.

The library includes standalone implementations of AES and SHAKE. The generation of the matrix
"A" (see the specification document) can be carried out with either AES128 or SHAKE128. By
default AES128 is used.

There are two options for AES: the standalone implementation that is included in the software or
OpenSSL's AES implementation. OpenSSL's AES implementation is used by default.


2. QUICK INSTRUCTIONS:
   ------------------

USING AES:
---------

Pick a given implementation and scheme, and then do:

$ cd <implementation>/<FrodoKEM-#>
$ make clean
$ make

Testing and benchmarking results are obtained by running:

$ ./frodo/test_KEM

To run the implementations against the KATs provided in the KAT folder execute:

$ ./frodo/PQCtestKAT_kem

These instructions are intended for x64 platforms using AES128 to generate the matrix "A" by
default. For AES, OpenSSL's AES implementation is used by default. Compilation is performed with
GNU GCC by default.

USING SHAKE128:
--------------

Pick a given implementation and scheme, and then do:

$ cd <implementation>/<FrodoKEM-#>
$ make clean
$ make GENERATION_A=SHAKE128

Testing and benchmarking results are obtained by running:

$ ./frodo/test_KEM

To run the implementations against the KATs provided in the KAT folder execute:

$ ./frodo/PQCtestKAT_kem_shake

Compilation is performed with GNU GCC by default.


3. ADDITIONAL OPTIONS
   ------------------

These are all the available options for compilation:

make CC=[gcc/clang] ARCH=[x64/x86/ARM] GENERATION_A=[AES128/SHAKE128] USE_OPENSSL=[TRUE/FALSE]

Note that the "additional implementations" are only supported on x64 platforms, so for these cases
ARCH must be set to x64 (or left blank).
The USE_OPENSSL flag determines whether OpenSSL's AES implementation is used (=TRUE) or if the
standalone AES implementation is used (=FALSE). Therefore, this flag only applies when GENERATION_A=
AES128 (or if left blank).

If OpenSSL is being used and is installed in an alternate location, use the following make options:
    OPENSSL_INCLUDE_DIR=/path/to/openssl/include
    OPENSSL_LIB_DIR=/path/to/openssl/lib

Refer to the README files in each implementation folder for explicit instructions for compilation and
testing.


4. LICENSE:
   -------

This software is licensed under the MIT License; see License.txt for details.
It includes some third party modules that are licensed differently. In particular:

- <implementation>/<FrodoKEM-#>/aes/aes.c: public domain
- <implementation>/<FrodoKEM-#>/aes/aes_c.c: public domain
- <implementation>/<FrodoKEM-#>/aes/aes_ni.c: public domain
- <implementation>/<FrodoKEM-#>/sha3/fips202.c: public domain
- <implementation>/<FrodoKEM-#>/sha3/fips202x4.c: public domain
- <implementation>/<FrodoKEM-#>/sha3/keccak4x: all files in this folder are public domain
  ([CC0](http://creativecommons.org/publicdomain/zero/1.0/)), excepting
- <implementation>/<FrodoKEM-#>/sha3/keccak4x/brg_endian.h which is copyrighted by Brian Gladman and
  comes with a BSD 3-clause license.
- <implementation>/<FrodoKEM-#>/tests/ds_benchmark.h: public domain
- <implementation>/<FrodoKEM-#>/tests/PQCtestKAT_kem.c: copyrighted by Lawrence E. Bassham
- <implementation>/<FrodoKEM-#>/tests/PQCtestKAT_kem_shake.c: copyrighted by Lawrence E. Bassham
- <implementation>/<FrodoKEM-#>/tests/rng.c: copyrighted by Lawrence E. Bassham


Contributors
------------

The library was developed by Microsoft Research using as basis the Frodo implementation from liboqs
(https://github.com/open-quantum-safe/liboqs).

Other contributors include:
- Erdem Alkim, while he was an intern with Microsoft Research.
- Douglas Stebila.
